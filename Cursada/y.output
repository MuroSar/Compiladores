   0  $accept : programa $end

   1  programa : bloque_comun

   2  bloque_comun : bloque_para_funcion
   3               | declaracion_funcion

   4  bloque_para_funcion : IF '(' condicion ')' THEN bloque_comun ELSE bloque_comun END_IF '.'
   5                      | IF '(' condicion ')' THEN bloque_comun END_IF '.'
   6                      | SWITCH '(' IDENTIFICADOR ')' '{' rep_switch '}' '.'
   7                      | BEGIN sentencias END '.'
   8                      | sentencias

   9  sentencias : declaracion sentencias
  10             | asignacion sentencias
  11             | salida sentencias
  12             | declaracion
  13             | asignacion
  14             | salida
  15             | llamado_funcion
  16             | llamado_funcion sentencias

  17  declaracion_funcion : funcion
  18                      | funcion sentencias

  19  funcion : tipo FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}'
  20          | tipo MOVE FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}'

  21  llamado_funcion : IDENTIFICADOR '(' ')' '.'

  22  asignacion : IDENTIFICADOR '=' expresion '.'

  23  declaracion : IDENTIFICADOR ':' tipo '.'
  24              | IDENTIFICADOR ',' declaracion

  25  rep_switch : CASE CONSTANTE ':' bloque_comun '.'
  26             | CASE CONSTANTE ':' bloque_comun '.' rep_switch

  27  condicion : expresion operador condicion
  28            | expresion operador termino

  29  operador : '<'
  30           | '>'
  31           | "<="
  32           | ">="
  33           | "<>"
  34           | "=="

  35  expresion : termino '+' expresion
  36            | termino '-' expresion
  37            | termino

  38  termino : factor '*' termino
  39          | factor '/' termino
  40          | factor

  41  factor : IDENTIFICADOR
  42         | CONSTANTE

  43  salida : OUT '(' CADENA ')' '.'

  44  tipo : LONG
  45       | DOUBLE

state 0
	$accept : . programa $end  (0)

	IDENTIFICADOR  shift 1
	IF  shift 2
	BEGIN  shift 3
	OUT  shift 4
	LONG  shift 5
	DOUBLE  shift 6
	SWITCH  shift 7
	.  error

	programa  goto 8
	bloque_comun  goto 9
	bloque_para_funcion  goto 10
	declaracion_funcion  goto 11
	sentencias  goto 12
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16
	funcion  goto 17
	tipo  goto 18


state 1
	llamado_funcion : IDENTIFICADOR . '(' ')' '.'  (21)
	asignacion : IDENTIFICADOR . '=' expresion '.'  (22)
	declaracion : IDENTIFICADOR . ':' tipo '.'  (23)
	declaracion : IDENTIFICADOR . ',' declaracion  (24)

	'('  shift 19
	'='  shift 20
	':'  shift 21
	','  shift 22
	.  error


state 2
	bloque_para_funcion : IF . '(' condicion ')' THEN bloque_comun ELSE bloque_comun END_IF '.'  (4)
	bloque_para_funcion : IF . '(' condicion ')' THEN bloque_comun END_IF '.'  (5)

	'('  shift 23
	.  error


state 3
	bloque_para_funcion : BEGIN . sentencias END '.'  (7)

	IDENTIFICADOR  shift 1
	OUT  shift 4
	.  error

	sentencias  goto 24
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16


state 4
	salida : OUT . '(' CADENA ')' '.'  (43)

	'('  shift 25
	.  error


state 5
	tipo : LONG .  (44)

	.  reduce 44


state 6
	tipo : DOUBLE .  (45)

	.  reduce 45


state 7
	bloque_para_funcion : SWITCH . '(' IDENTIFICADOR ')' '{' rep_switch '}' '.'  (6)

	'('  shift 26
	.  error


state 8
	$accept : programa . $end  (0)

	$end  accept


state 9
	programa : bloque_comun .  (1)

	.  reduce 1


state 10
	bloque_comun : bloque_para_funcion .  (2)

	.  reduce 2


state 11
	bloque_comun : declaracion_funcion .  (3)

	.  reduce 3


state 12
	bloque_para_funcion : sentencias .  (8)

	.  reduce 8


state 13
	sentencias : declaracion . sentencias  (9)
	sentencias : declaracion .  (12)

	IDENTIFICADOR  shift 1
	OUT  shift 4
	$end  reduce 12
	ELSE  reduce 12
	END_IF  reduce 12
	END  reduce 12
	RETURN  reduce 12
	'.'  reduce 12

	sentencias  goto 27
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16


state 14
	sentencias : asignacion . sentencias  (10)
	sentencias : asignacion .  (13)

	IDENTIFICADOR  shift 1
	OUT  shift 4
	$end  reduce 13
	ELSE  reduce 13
	END_IF  reduce 13
	END  reduce 13
	RETURN  reduce 13
	'.'  reduce 13

	sentencias  goto 28
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16


state 15
	sentencias : salida . sentencias  (11)
	sentencias : salida .  (14)

	IDENTIFICADOR  shift 1
	OUT  shift 4
	$end  reduce 14
	ELSE  reduce 14
	END_IF  reduce 14
	END  reduce 14
	RETURN  reduce 14
	'.'  reduce 14

	sentencias  goto 29
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16


state 16
	sentencias : llamado_funcion .  (15)
	sentencias : llamado_funcion . sentencias  (16)

	IDENTIFICADOR  shift 1
	OUT  shift 4
	$end  reduce 15
	ELSE  reduce 15
	END_IF  reduce 15
	END  reduce 15
	RETURN  reduce 15
	'.'  reduce 15

	sentencias  goto 30
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16


state 17
	declaracion_funcion : funcion .  (17)
	declaracion_funcion : funcion . sentencias  (18)

	IDENTIFICADOR  shift 1
	OUT  shift 4
	$end  reduce 17
	ELSE  reduce 17
	END_IF  reduce 17
	'.'  reduce 17

	sentencias  goto 31
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16


state 18
	funcion : tipo . FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}'  (19)
	funcion : tipo . MOVE FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}'  (20)

	FUNCTION  shift 32
	MOVE  shift 33
	.  error


state 19
	llamado_funcion : IDENTIFICADOR '(' . ')' '.'  (21)

	')'  shift 34
	.  error


state 20
	asignacion : IDENTIFICADOR '=' . expresion '.'  (22)

	IDENTIFICADOR  shift 35
	CONSTANTE  shift 36
	.  error

	expresion  goto 37
	termino  goto 38
	factor  goto 39


state 21
	declaracion : IDENTIFICADOR ':' . tipo '.'  (23)

	LONG  shift 5
	DOUBLE  shift 6
	.  error

	tipo  goto 40


state 22
	declaracion : IDENTIFICADOR ',' . declaracion  (24)

	IDENTIFICADOR  shift 41
	.  error

	declaracion  goto 42


state 23
	bloque_para_funcion : IF '(' . condicion ')' THEN bloque_comun ELSE bloque_comun END_IF '.'  (4)
	bloque_para_funcion : IF '(' . condicion ')' THEN bloque_comun END_IF '.'  (5)

	IDENTIFICADOR  shift 35
	CONSTANTE  shift 36
	.  error

	condicion  goto 43
	expresion  goto 44
	termino  goto 38
	factor  goto 39


state 24
	bloque_para_funcion : BEGIN sentencias . END '.'  (7)

	END  shift 45
	.  error


state 25
	salida : OUT '(' . CADENA ')' '.'  (43)

	CADENA  shift 46
	.  error


state 26
	bloque_para_funcion : SWITCH '(' . IDENTIFICADOR ')' '{' rep_switch '}' '.'  (6)

	IDENTIFICADOR  shift 47
	.  error


state 27
	sentencias : declaracion sentencias .  (9)

	.  reduce 9


state 28
	sentencias : asignacion sentencias .  (10)

	.  reduce 10


state 29
	sentencias : salida sentencias .  (11)

	.  reduce 11


state 30
	sentencias : llamado_funcion sentencias .  (16)

	.  reduce 16


state 31
	declaracion_funcion : funcion sentencias .  (18)

	.  reduce 18


state 32
	funcion : tipo FUNCTION . IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}'  (19)

	IDENTIFICADOR  shift 48
	.  error


state 33
	funcion : tipo MOVE . FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}'  (20)

	FUNCTION  shift 49
	.  error


state 34
	llamado_funcion : IDENTIFICADOR '(' ')' . '.'  (21)

	'.'  shift 50
	.  error


state 35
	factor : IDENTIFICADOR .  (41)

	.  reduce 41


state 36
	factor : CONSTANTE .  (42)

	.  reduce 42


state 37
	asignacion : IDENTIFICADOR '=' expresion . '.'  (22)

	'.'  shift 51
	.  error


state 38
	expresion : termino . '+' expresion  (35)
	expresion : termino . '-' expresion  (36)
	expresion : termino .  (37)

	'+'  shift 52
	'-'  shift 53
	')'  reduce 37
	'.'  reduce 37
	'<'  reduce 37
	'>'  reduce 37
	"<="  reduce 37
	">="  reduce 37
	"<>"  reduce 37
	"=="  reduce 37


state 39
	termino : factor . '*' termino  (38)
	termino : factor . '/' termino  (39)
	termino : factor .  (40)

	'*'  shift 54
	'/'  shift 55
	')'  reduce 40
	'.'  reduce 40
	'<'  reduce 40
	'>'  reduce 40
	"<="  reduce 40
	">="  reduce 40
	"<>"  reduce 40
	"=="  reduce 40
	'+'  reduce 40
	'-'  reduce 40


state 40
	declaracion : IDENTIFICADOR ':' tipo . '.'  (23)

	'.'  shift 56
	.  error


state 41
	declaracion : IDENTIFICADOR . ':' tipo '.'  (23)
	declaracion : IDENTIFICADOR . ',' declaracion  (24)

	':'  shift 21
	','  shift 22
	.  error


state 42
	declaracion : IDENTIFICADOR ',' declaracion .  (24)

	.  reduce 24


state 43
	bloque_para_funcion : IF '(' condicion . ')' THEN bloque_comun ELSE bloque_comun END_IF '.'  (4)
	bloque_para_funcion : IF '(' condicion . ')' THEN bloque_comun END_IF '.'  (5)

	')'  shift 57
	.  error


state 44
	condicion : expresion . operador condicion  (27)
	condicion : expresion . operador termino  (28)

	'<'  shift 58
	'>'  shift 59
	"<="  shift 60
	">="  shift 61
	"<>"  shift 62
	"=="  shift 63
	.  error

	operador  goto 64


state 45
	bloque_para_funcion : BEGIN sentencias END . '.'  (7)

	'.'  shift 65
	.  error


state 46
	salida : OUT '(' CADENA . ')' '.'  (43)

	')'  shift 66
	.  error


state 47
	bloque_para_funcion : SWITCH '(' IDENTIFICADOR . ')' '{' rep_switch '}' '.'  (6)

	')'  shift 67
	.  error


state 48
	funcion : tipo FUNCTION IDENTIFICADOR . '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}'  (19)

	'{'  shift 68
	.  error


state 49
	funcion : tipo MOVE FUNCTION . IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}'  (20)

	IDENTIFICADOR  shift 69
	.  error


state 50
	llamado_funcion : IDENTIFICADOR '(' ')' '.' .  (21)

	.  reduce 21


state 51
	asignacion : IDENTIFICADOR '=' expresion '.' .  (22)

	.  reduce 22


state 52
	expresion : termino '+' . expresion  (35)

	IDENTIFICADOR  shift 35
	CONSTANTE  shift 36
	.  error

	expresion  goto 70
	termino  goto 38
	factor  goto 39


state 53
	expresion : termino '-' . expresion  (36)

	IDENTIFICADOR  shift 35
	CONSTANTE  shift 36
	.  error

	expresion  goto 71
	termino  goto 38
	factor  goto 39


state 54
	termino : factor '*' . termino  (38)

	IDENTIFICADOR  shift 35
	CONSTANTE  shift 36
	.  error

	termino  goto 72
	factor  goto 39


state 55
	termino : factor '/' . termino  (39)

	IDENTIFICADOR  shift 35
	CONSTANTE  shift 36
	.  error

	termino  goto 73
	factor  goto 39


state 56
	declaracion : IDENTIFICADOR ':' tipo '.' .  (23)

	.  reduce 23


state 57
	bloque_para_funcion : IF '(' condicion ')' . THEN bloque_comun ELSE bloque_comun END_IF '.'  (4)
	bloque_para_funcion : IF '(' condicion ')' . THEN bloque_comun END_IF '.'  (5)

	THEN  shift 74
	.  error


state 58
	operador : '<' .  (29)

	.  reduce 29


state 59
	operador : '>' .  (30)

	.  reduce 30


state 60
	operador : "<=" .  (31)

	.  reduce 31


state 61
	operador : ">=" .  (32)

	.  reduce 32


state 62
	operador : "<>" .  (33)

	.  reduce 33


state 63
	operador : "==" .  (34)

	.  reduce 34


state 64
	condicion : expresion operador . condicion  (27)
	condicion : expresion operador . termino  (28)

	IDENTIFICADOR  shift 35
	CONSTANTE  shift 36
	.  error

	condicion  goto 75
	expresion  goto 44
	termino  goto 76
	factor  goto 39


state 65
	bloque_para_funcion : BEGIN sentencias END '.' .  (7)

	.  reduce 7


state 66
	salida : OUT '(' CADENA ')' . '.'  (43)

	'.'  shift 77
	.  error


state 67
	bloque_para_funcion : SWITCH '(' IDENTIFICADOR ')' . '{' rep_switch '}' '.'  (6)

	'{'  shift 78
	.  error


state 68
	funcion : tipo FUNCTION IDENTIFICADOR '{' . bloque_para_funcion RETURN '(' expresion ')' '.' '}'  (19)

	IDENTIFICADOR  shift 1
	IF  shift 2
	BEGIN  shift 3
	OUT  shift 4
	SWITCH  shift 7
	.  error

	bloque_para_funcion  goto 79
	sentencias  goto 12
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16


state 69
	funcion : tipo MOVE FUNCTION IDENTIFICADOR . '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}'  (20)

	'{'  shift 80
	.  error


state 70
	expresion : termino '+' expresion .  (35)

	.  reduce 35


state 71
	expresion : termino '-' expresion .  (36)

	.  reduce 36


state 72
	termino : factor '*' termino .  (38)

	.  reduce 38


state 73
	termino : factor '/' termino .  (39)

	.  reduce 39


state 74
	bloque_para_funcion : IF '(' condicion ')' THEN . bloque_comun ELSE bloque_comun END_IF '.'  (4)
	bloque_para_funcion : IF '(' condicion ')' THEN . bloque_comun END_IF '.'  (5)

	IDENTIFICADOR  shift 1
	IF  shift 2
	BEGIN  shift 3
	OUT  shift 4
	LONG  shift 5
	DOUBLE  shift 6
	SWITCH  shift 7
	.  error

	bloque_comun  goto 81
	bloque_para_funcion  goto 10
	declaracion_funcion  goto 11
	sentencias  goto 12
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16
	funcion  goto 17
	tipo  goto 18


state 75
	condicion : expresion operador condicion .  (27)

	.  reduce 27


state 76
	condicion : expresion operador termino .  (28)
	expresion : termino . '+' expresion  (35)
	expresion : termino . '-' expresion  (36)
	expresion : termino .  (37)

	'+'  shift 52
	'-'  shift 53
	')'  reduce 28
	'<'  reduce 37
	'>'  reduce 37
	"<="  reduce 37
	">="  reduce 37
	"<>"  reduce 37
	"=="  reduce 37


state 77
	salida : OUT '(' CADENA ')' '.' .  (43)

	.  reduce 43


state 78
	bloque_para_funcion : SWITCH '(' IDENTIFICADOR ')' '{' . rep_switch '}' '.'  (6)

	CASE  shift 82
	.  error

	rep_switch  goto 83


state 79
	funcion : tipo FUNCTION IDENTIFICADOR '{' bloque_para_funcion . RETURN '(' expresion ')' '.' '}'  (19)

	RETURN  shift 84
	.  error


state 80
	funcion : tipo MOVE FUNCTION IDENTIFICADOR '{' . bloque_para_funcion RETURN '(' expresion ')' '.' '}'  (20)

	IDENTIFICADOR  shift 1
	IF  shift 2
	BEGIN  shift 3
	OUT  shift 4
	SWITCH  shift 7
	.  error

	bloque_para_funcion  goto 85
	sentencias  goto 12
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16


state 81
	bloque_para_funcion : IF '(' condicion ')' THEN bloque_comun . ELSE bloque_comun END_IF '.'  (4)
	bloque_para_funcion : IF '(' condicion ')' THEN bloque_comun . END_IF '.'  (5)

	ELSE  shift 86
	END_IF  shift 87
	.  error


state 82
	rep_switch : CASE . CONSTANTE ':' bloque_comun '.'  (25)
	rep_switch : CASE . CONSTANTE ':' bloque_comun '.' rep_switch  (26)

	CONSTANTE  shift 88
	.  error


state 83
	bloque_para_funcion : SWITCH '(' IDENTIFICADOR ')' '{' rep_switch . '}' '.'  (6)

	'}'  shift 89
	.  error


state 84
	funcion : tipo FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN . '(' expresion ')' '.' '}'  (19)

	'('  shift 90
	.  error


state 85
	funcion : tipo MOVE FUNCTION IDENTIFICADOR '{' bloque_para_funcion . RETURN '(' expresion ')' '.' '}'  (20)

	RETURN  shift 91
	.  error


state 86
	bloque_para_funcion : IF '(' condicion ')' THEN bloque_comun ELSE . bloque_comun END_IF '.'  (4)

	IDENTIFICADOR  shift 1
	IF  shift 2
	BEGIN  shift 3
	OUT  shift 4
	LONG  shift 5
	DOUBLE  shift 6
	SWITCH  shift 7
	.  error

	bloque_comun  goto 92
	bloque_para_funcion  goto 10
	declaracion_funcion  goto 11
	sentencias  goto 12
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16
	funcion  goto 17
	tipo  goto 18


state 87
	bloque_para_funcion : IF '(' condicion ')' THEN bloque_comun END_IF . '.'  (5)

	'.'  shift 93
	.  error


state 88
	rep_switch : CASE CONSTANTE . ':' bloque_comun '.'  (25)
	rep_switch : CASE CONSTANTE . ':' bloque_comun '.' rep_switch  (26)

	':'  shift 94
	.  error


state 89
	bloque_para_funcion : SWITCH '(' IDENTIFICADOR ')' '{' rep_switch '}' . '.'  (6)

	'.'  shift 95
	.  error


state 90
	funcion : tipo FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' . expresion ')' '.' '}'  (19)

	IDENTIFICADOR  shift 35
	CONSTANTE  shift 36
	.  error

	expresion  goto 96
	termino  goto 38
	factor  goto 39


state 91
	funcion : tipo MOVE FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN . '(' expresion ')' '.' '}'  (20)

	'('  shift 97
	.  error


state 92
	bloque_para_funcion : IF '(' condicion ')' THEN bloque_comun ELSE bloque_comun . END_IF '.'  (4)

	END_IF  shift 98
	.  error


state 93
	bloque_para_funcion : IF '(' condicion ')' THEN bloque_comun END_IF '.' .  (5)

	.  reduce 5


state 94
	rep_switch : CASE CONSTANTE ':' . bloque_comun '.'  (25)
	rep_switch : CASE CONSTANTE ':' . bloque_comun '.' rep_switch  (26)

	IDENTIFICADOR  shift 1
	IF  shift 2
	BEGIN  shift 3
	OUT  shift 4
	LONG  shift 5
	DOUBLE  shift 6
	SWITCH  shift 7
	.  error

	bloque_comun  goto 99
	bloque_para_funcion  goto 10
	declaracion_funcion  goto 11
	sentencias  goto 12
	declaracion  goto 13
	asignacion  goto 14
	salida  goto 15
	llamado_funcion  goto 16
	funcion  goto 17
	tipo  goto 18


state 95
	bloque_para_funcion : SWITCH '(' IDENTIFICADOR ')' '{' rep_switch '}' '.' .  (6)

	.  reduce 6


state 96
	funcion : tipo FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion . ')' '.' '}'  (19)

	')'  shift 100
	.  error


state 97
	funcion : tipo MOVE FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' . expresion ')' '.' '}'  (20)

	IDENTIFICADOR  shift 35
	CONSTANTE  shift 36
	.  error

	expresion  goto 101
	termino  goto 38
	factor  goto 39


state 98
	bloque_para_funcion : IF '(' condicion ')' THEN bloque_comun ELSE bloque_comun END_IF . '.'  (4)

	'.'  shift 102
	.  error


state 99
	rep_switch : CASE CONSTANTE ':' bloque_comun . '.'  (25)
	rep_switch : CASE CONSTANTE ':' bloque_comun . '.' rep_switch  (26)

	'.'  shift 103
	.  error


state 100
	funcion : tipo FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' . '.' '}'  (19)

	'.'  shift 104
	.  error


state 101
	funcion : tipo MOVE FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion . ')' '.' '}'  (20)

	')'  shift 105
	.  error


state 102
	bloque_para_funcion : IF '(' condicion ')' THEN bloque_comun ELSE bloque_comun END_IF '.' .  (4)

	.  reduce 4


state 103
	rep_switch : CASE CONSTANTE ':' bloque_comun '.' .  (25)
	rep_switch : CASE CONSTANTE ':' bloque_comun '.' . rep_switch  (26)

	CASE  shift 82
	'}'  reduce 25

	rep_switch  goto 106


state 104
	funcion : tipo FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' . '}'  (19)

	'}'  shift 107
	.  error


state 105
	funcion : tipo MOVE FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' . '.' '}'  (20)

	'.'  shift 108
	.  error


state 106
	rep_switch : CASE CONSTANTE ':' bloque_comun '.' rep_switch .  (26)

	.  reduce 26


state 107
	funcion : tipo FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}' .  (19)

	.  reduce 19


state 108
	funcion : tipo MOVE FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' . '}'  (20)

	'}'  shift 109
	.  error


state 109
	funcion : tipo MOVE FUNCTION IDENTIFICADOR '{' bloque_para_funcion RETURN '(' expresion ')' '.' '}' .  (20)

	.  reduce 20


37 terminals, 18 nonterminals
46 grammar rules, 110 states
